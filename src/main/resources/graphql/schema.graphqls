union Result = Success | Failed

type Query {
    # User Queries
    users: [User!]!
    user(userId: Int!): Result!

    # Post Queries
    posts: [Post!]!
    post(postId: Int!): Result!
    postsByContent(content: String!): [Post!]!

    # Comment Queries
    comments: [Comment!]!
    comment(commentId: Int!): Result!
    commentsByContent(content: String!): [Comment!]!

    # Space Queries
    spaces: [Space!]!
    space(spaceId: Int!): Result!

    # Message Queries
    messages: [Message!]!
    message(messageId: Int!): Result!
}

type Mutation {
    register(registerInput: RegisterInput): AuthResponse!
    login(loginInput: LoginInput): AuthResponse!

    # User Mutations
    createUser(registerInput: RegisterInput!): Result!
    updateUser(userId: Int!, userInput: UserInput!): Result!
    deleteUser(userId: Int!): String!

    # Post Mutations
    createPost(userId: Int!, postInput: PostInput!): Result!
    updatePost(postId: Int!, postInput: PostInput!): Result!
    deletePost(postId: Int!): String!

    # Comment Mutations
    createComment(postId: Int!, commentInput: CommentInput!): Result!
    updateComment(commentId: Int!, commentInput: CommentInput!): Result!
    deleteComment(commentId: Int!): String!

    # Space Mutations
    createSpace(spaceInput: SpaceInput!): Result!
    updateSpace(spaceId: Int!, spaceInput: SpaceInput!): Result!
    joinSpace(spaceId: Int!, userId: Int!): Result!
    deleteSpace(spaceId: Int!): String!

    # Message Mutations
    createMessage(messageInput: MessageInput!): Result!
    updateMessage(spaceId: Int!, spaceInput: MessageInput!): Result!
    deleteMessage(spaceId: Int!): String!
}

input LoginInput {
    email: String!
    password: String!
}

type AuthResponse {
    token: String!
}

type Success {
    id: Int!
    user: User
    post: Post
    comment: Comment
    space: Space
    joinedSpace: String
}

type Failed {
    errorMessage: String!
}

type User {
    id: Int!
    name: String!
    username: String
    image: String
    bio: String
    email: String
    posts: [Post!]
    comments: [Comment!]
    createdAt: String
    updatedAt: String
}

type Post {
    id: Int!
    user: User!
    content: String!
    media: String
    comments: [Comment!]
    createdAt: String
    updatedAt: String
}

type Comment {
    id: Int!
    user: User!
    post: Post!
    content: String!
    media: String
    createdAt: String
    updatedAt: String
}

type Space {
    id: Int!
    members: [User!]!
    name: String!
    messages: [Message!]!
    createdAt: String
    updatedAt: String
}

type Message {
    id: Int!
    space: Space!
    sender: User!
    receiver: User!
    createdAt: String
    updatedAt: String
}

input RegisterInput {
    userDetails: UserInput!
    email: String!
    password: String!
}

input UserInput {
    name: String
    username: String
    image: String
    bio: String
}

input PostInput {
    content: String
    media: String
}

input CommentInput {
    content: String
    media: String
}

input SpaceInput {
    name: String!
    userId: Int!
}

input MessageInput {
    sender: String
    receiver: String
    status: Status
}

enum Status {
    JOIN
    MESSAGE
    LEAVE
}